import pandas as pd
import numpy as np
import seaborn as sns
from matplotlib import pyplot as plt

from mlxtend.frequent_patterns import apriori,association_rules
from mlxtend.preprocessing import TransactionEncoder

import warnings 
warnings.filterwarnings('ignore')

book_data=pd.read_csv('book.csv')
book_data.head()

book_data.info()

book_data.shape

book_data.size

book_data.isnull().sum()

book_data.duplicated().sum()

book_data.dtypes

book_data.columns

#1 with Apriori Min support 0.1 & Metric lift with threshold 0.7

# Apriori Algorithm
frequent_itemsets = apriori(book_data, min_support=0.1, use_colnames=True)
frequent_itemsets

rules = association_rules(frequent_itemsets, metric="lift", min_threshold=0.7)
rules

rules.sort_values('lift',ascending = False)[0:20]

rules[rules.lift>1]

rule1=association_rules(frequent_itemsets, metric= "confidence", min_threshold=0.7)
rule1

#2nd With different value

frequent_itemsets = apriori(book_data, min_support=0.2, use_colnames=True)
frequent_itemsets

rules2 = association_rules(frequent_itemsets, metric="lift", min_threshold=0.3)
rules2

rules2.sort_values('lift',ascending = False)[0:2]

rules2[rules2.lift>1]

rule3=association_rules(frequent_itemsets, metric= "confidence", min_threshold=0.3)
rule3

#with 3rd value

frequent_itemsets = apriori(book_data, min_support=0.1, use_colnames=True)
frequent_itemsets

rules4 = association_rules(frequent_itemsets, metric="lift", min_threshold=0.1)
rules4

rules4[rules4.lift>1]

rules.sort_values('lift',ascending = False)[0:20]

rule4=association_rules(frequent_itemsets, metric= "confidence", min_threshold=0.2)
rule4

# Movies Data
movies_data = pd.read_csv("my_movies.csv")
movies_data.head()

movies_data.shape

movies_data.size

movies_data.info

movies_data.dtypes

data=pd.get_dummies(movies_data)
data

# Apriori algorithm
frequent_itemsets = apriori(data, min_support=0.1, use_colnames=True)
frequent_itemsets

rules = association_rules(frequent_itemsets, metric="lift", min_threshold=0.7)
rules

rules.sort_values('lift',ascending = False)[0:20]

rules[rules.lift>1]

#Lets Sort the Rules by Confidence
rule1=association_rules(frequent_itemsets, metric= "confidence", min_threshold=0.7)
rule1

#With 2nd Value

frequent_itemsets = apriori(data, min_support=0.2, use_colnames=True)
frequent_itemsets

rules6 = association_rules(frequent_itemsets, metric="lift", min_threshold=0.1)
rules6

rules6.sort_values('lift',ascending = False)[0:20]

rules6[rules6.lift>1]

#Lets Sort the Rules by Confidence
rule7=association_rules(frequent_itemsets, metric= "confidence", min_threshold=0.2)
rule7

# Here Confidence is changes as we have changed min threshold

#With 3rd Value

frequent_itemsets = apriori(data, min_support=0.4, use_colnames=True)
frequent_itemsets
# Very Few Rows obtained as we increases min support value

rules8 = association_rules(frequent_itemsets, metric="lift", min_threshold=0.6)
rules8

rules8.sort_values('lift',ascending = False)[0:20]

rules8[rules8.lift>1]

#Lets Sort the Rules by Confidence
rule9=association_rules(frequent_itemsets, metric= "confidence", min_threshold=0.7)
rule9

